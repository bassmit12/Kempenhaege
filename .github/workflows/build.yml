name: "Flutter Build and Release"

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create release"
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build:
    name: Build Flutter App
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.3'
          channel: 'stable'
          cache: true
      
      - name: Set Working Directory
        run: |
          if [ -d "frontend" ]; then
            echo "WORKDIR=frontend" >> $GITHUB_ENV
          else
            echo "WORKDIR=." >> $GITHUB_ENV
          fi
          echo "Working directory set to: ${{ env.WORKDIR }}"
      
      - name: Flutter Dependencies
        working-directory: ${{ env.WORKDIR }}
        run: flutter pub get
      
      - name: Setup Keystore
        working-directory: ${{ env.WORKDIR }}
        run: |
          mkdir -p android/app/keystore
          
          # Use release keystore if available, or generate debug keystore
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore/release.keystore
            echo "storeFile=keystore/release.keystore" > android/key.properties
            echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
            echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
            echo "Using release keystore"
          else
            keytool -genkeypair -v -keystore android/app/keystore/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
            echo "storeFile=keystore/debug.keystore" > android/key.properties
            echo "keyAlias=androiddebugkey" >> android/key.properties
            echo "storePassword=android" >> android/key.properties
            echo "keyPassword=android" >> android/key.properties
            echo "Using debug keystore"
          fi
      
      - name: Add Play Core Dependency
        working-directory: ${{ env.WORKDIR }}
        run: |
          if [ -f "android/app/build.gradle.kts" ]; then
            # Simple file append for Kotlin DSL
            grep -q "dependencies" "android/app/build.gradle.kts" || echo -e "\ndependencies {\n}" >> "android/app/build.gradle.kts"
            sed -i '/dependencies {/a \    implementation("com.google.android.play:core:1.10.3")' "android/app/build.gradle.kts"
            echo "Added Play Core dependency to build.gradle.kts"
          elif [ -f "android/app/build.gradle" ]; then
            # Simple file append for Groovy DSL
            grep -q "dependencies" "android/app/build.gradle" || echo -e "\ndependencies {\n}" >> "android/app/build.gradle"
            sed -i '/dependencies {/a \    implementation "com.google.android.play:core:1.10.3"' "android/app/build.gradle"
            echo "Added Play Core dependency to build.gradle"
          else
            echo "Warning: Could not find build.gradle or build.gradle.kts file!"
          fi
      
      - name: Build Debug APK
        working-directory: ${{ env.WORKDIR }}
        run: flutter build apk --debug
      
      - name: Build Release APK
        working-directory: ${{ env.WORKDIR }}
        run: flutter build apk --release
      
      - name: Build App Bundle
        working-directory: ${{ env.WORKDIR }}
        run: flutter build appbundle --release
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-builds
          path: |
            ${{ env.WORKDIR }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ env.WORKDIR }}/build/app/outputs/bundle/release/app-release.aab
      
      - name: Extract Version
        id: version
        working-directory: ${{ env.WORKDIR }}
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | tr -d '\r')
          VERSION_NAME=$(echo $VERSION | cut -d'+' -f1)
          echo "VERSION=$VERSION_NAME" >> $GITHUB_ENV
          echo "Extracted version: $VERSION_NAME"
      
      - name: Create Release
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.create_release == 'true'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.WORKDIR }}/build/app/outputs/flutter-apk/app-release.apk,${{ env.WORKDIR }}/build/app/outputs/bundle/release/app-release.aab"
          tag: "v${{ env.VERSION }}"
          name: "Release v${{ env.VERSION }}"
          body: |
            Release version ${{ env.VERSION }}
            
            ### Changes in this version:
            - Bug fixes and improvements
            - Performance enhancements
            
            ### Installation:
            Download and install the APK file directly on your Android device.
          skipIfReleaseExists: true
          token: ${{ secrets.GITHUB_TOKEN }}
