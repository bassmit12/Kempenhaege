name: "Build and Release"

on:
  pull_request:
    branches:
      - dev
      - main
  push:
    branches:
      - dev
      - main
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create a release"
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest

    steps:
      #1 Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history to properly check tags

      # Debug step to see directory structure
      - name: Debug - Show directory structure
        run: |
          pwd
          ls -la
          find . -type d -maxdepth 2

      #2 Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: "temurin"
          java-version: "17"
          cache: gradle # Enable Java/Gradle dependency caching

      #3 Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.13.9"
          channel: "stable"
          cache: true # Enable Flutter tool caching

      #4 Cache Pub Dependencies
      - name: Cache Pub Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool/
            ~/.pub-cache/
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      #5 Cache Gradle Dependencies
      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
            ${{ github.workspace }}/frontend/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('frontend/**/*.gradle*', 'frontend/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      #6 Check if frontend directory exists and install dependencies
      - name: Check paths and install dependencies
        run: |
          echo "Current directory: $(pwd)"
          echo "GitHub workspace: ${{ github.workspace }}"
          echo "List directories:"
          ls -la
          
          if [ -d "frontend" ]; then
            cd frontend
            echo "Running flutter pub get in $(pwd)"
            flutter pub get
          else
            echo "Error: frontend directory not found. Directory contents:"
            ls -la
            exit 1
          fi

      #7 Create Local Properties
      - name: Create Local Properties
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            echo "flutter.sdk=/opt/hostedtoolcache/flutter/stable-3.13.9-x64" > android/local.properties
          else
            echo "Error: frontend directory not found"
            exit 1
          fi

      #8 Check for keystore secret
      - name: Check for keystore secret
        id: check_keystore
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "has_keystore=true" >> $GITHUB_OUTPUT
          else
            echo "has_keystore=false" >> $GITHUB_OUTPUT
          fi

      #9 Setup keystore from secrets
      - name: Setup keystore
        if: steps.check_keystore.outputs.has_keystore == 'true'
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
            echo "storeFile=../app/keystore.jks" > android/key.properties
            echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
            echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties

            # Display the SHA-1 fingerprint for verification
            keytool -list -v -keystore android/app/keystore.jks -alias ${{ secrets.KEY_ALIAS }} -storepass ${{ secrets.STORE_PASSWORD }} -keypass ${{ secrets.KEY_PASSWORD }} | grep "SHA1:"
          else
            echo "Error: frontend directory not found"
            exit 1
          fi

      #10 Use a Debug Key for PR Builds
      - name: Generate debug keystore for PR builds
        if: steps.check_keystore.outputs.has_keystore != 'true' || github.event_name == 'pull_request'
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            mkdir -p android/app
            keytool -genkeypair -v -keystore android/app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
            echo "storeFile=../app/debug.keystore" > android/key.properties
            echo "keyAlias=androiddebugkey" >> android/key.properties
            echo "storePassword=android" >> android/key.properties
            echo "keyPassword=android" >> android/key.properties
          else
            echo "Error: frontend directory not found"
            exit 1
          fi

      #11 Build Release APK
      - name: Build Release APK
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            flutter build apk --release
          else
            echo "Error: frontend directory not found"
            exit 1
          fi

      #12 Build App Bundle
      - name: Build App Bundle
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            flutter build appbundle --release
          else
            echo "Error: frontend directory not found"
            exit 1
          fi

      #13 Upload Release Artifacts
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Release-APK
          path: |
            ${{ github.workspace }}/frontend/build/app/outputs/flutter-apk/app-release.apk
            ${{ github.workspace }}/frontend/build/app/outputs/bundle/release/app-release.aab

      #14 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          if [ -d "frontend" ]; then
            cd frontend
            version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
            # Strip build number part if present (after the +)
            version_without_build=$(echo $version | cut -d '+' -f 1)
            echo "VERSION=$version_without_build" >> $GITHUB_ENV
            echo "FULL_VERSION=$version" >> $GITHUB_ENV
            echo "Extracted version: $version_without_build (full: $version)"
          else
            echo "Error: frontend directory not found"
            exit 1
          fi

      #15 Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          # Fetch all tags
          git fetch --tags

          # Check if tag exists
          tag_name="v${{ env.VERSION }}"
          if git tag -l "$tag_name" | grep -q "$tag_name"; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
            echo "Tag $tag_name already exists"
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
            echo "Tag $tag_name does not exist"
          fi

      #16 Modify Version if Tag Exists
      - name: Modify Version if Tag Exists
        if: env.TAG_EXISTS == 'true'
        id: modify_version
        run: |
          original_version="${{ env.VERSION }}"
          new_version="${original_version}-build-${{ github.run_number }}"
          echo "Modified version from $original_version to $new_version"
          echo "VERSION=$new_version" >> $GITHUB_ENV

          # Double-check that the new tag doesn't exist
          if git tag -l "v$new_version" | grep -q "v$new_version"; then
            echo "Error: Modified tag v$new_version also exists!"
            exit 1
          else
            echo "Modified tag v$new_version is available"
          fi

      #17 Create Release
      - name: Create Release
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.create_release == 'true'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.workspace }}/frontend/build/app/outputs/flutter-apk/app-release.apk,${{ github.workspace }}/frontend/build/app/outputs/bundle/release/app-release.aab"
          tag: v${{ env.VERSION }}
          name: "Kempenhaege Schedule v${{ env.VERSION }}"
          body: |
            Release of Kempenhaege Schedule version ${{ env.VERSION }}

            ### What's New
            - Latest features and improvements
            - Bug fixes and performance enhancements

            ### APK File
            Download the APK file to install directly on Android devices

            ### App Bundle
            The AAB file is for Play Store submission
          draft: false
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          token: ${{ secrets.GITHUB_TOKEN }}